import type { Metadata } from "next";
import { Gabarito } from "next/font/google";
import "./globals.scss";
import { Toaster } from "react-hot-toast";
import Navbar from "./components/Navbar";
import IdentityProvider from "./identity-provider";
import customFetch, { ApiResponse } from "./lib/customFetch";
import { iIdentityResponse } from "./identity.type";

const gabarito = Gabarito({ subsets: ["latin"] });

export const metadata: Metadata = {
    title: `Films ${process.env.NEXT_PUBLIC_COMPANY_NAME}`,
    description: "Generated by create next app",
};

async function getChannelName(): Promise<ApiResponse<iIdentityResponse>> {
    const res = await customFetch<{}, iIdentityResponse>({
        url: `${process.env.NEXT_PUBLIC_BASE_URL_API}/people/1/`,
        cache: "no-store",
        apiName: "Get Channel Name",
    });
    return res as ApiResponse<iIdentityResponse>;
}

export default async function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const data = (await getChannelName()) as ApiResponse<iIdentityResponse>;
    const errorFromServer = { ...data };
    delete errorFromServer.data;

    return (
        <html lang="en">
            <body className={gabarito.className}>
                <IdentityProvider value={(data?.data?.name as string) || ""}>
                    <Toaster />
                    <Navbar errorFromServer={errorFromServer} />
                    {children}
                </IdentityProvider>
            </body>
        </html>
    );
}
